---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-data
  namespace: tenant-d
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: tenant-d
data:
  postgresql.conf: |
    shared_buffers = 256MB
    work_mem = 32MB
    maintenance_work_mem = 128MB
    max_connections = 100
    random_page_cost = 1.5
    effective_io_concurrency = 200
    synchronous_commit = off
    max_worker_processes = 8
    max_parallel_workers_per_gather = 4
    max_parallel_workers = 8
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: tenant-d
  labels:
    app: postgres
spec:
  ports:
  - port: 5432
    name: postgres
  - port: 9187
    name: metrics
  selector:
    app: postgres
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: tenant-d
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      runtimeClassName: kata  # Usando Kata Containers para isolamento adicional
      containers:
      - name: postgres
        image: postgres:14
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: benchmark
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          value: password123
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 1
            memory: 1.5Gi
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/conf.d/postgres-custom.conf
          subPath: postgresql.conf
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-data
      - name: postgres-config
        configMap:
          name: postgres-config
---
apiVersion: batch/v1
kind: Job
metadata:
  name: pgbench-init
  namespace: tenant-d
spec:
  template:
    metadata:
      name: pgbench-init
    spec:
      runtimeClassName: kata  # Usando Kata Containers para isolamento adicional
      containers:
      - name: pgbench-init
        image: postgres:14
        command:
        - "/bin/bash"
        - "-c"
        - |
          echo "Aguardando PostgreSQL inicializar..."
          
          until pg_isready -h postgres -U postgres; do
            echo "PostgreSQL não está pronto ainda. Aguardando..."
            sleep 2
          done
          
          echo "PostgreSQL está pronto! Inicializando banco de dados de benchmark..."
          pgbench -h postgres -U postgres -i -s 50 benchmark
          echo "Inicialização do benchmark concluída!"
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 400m
            memory: 512Mi
      restartPolicy: Never
  backoffLimit: 5
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: pgbench-workload
  namespace: tenant-d
spec:
  schedule: "*/5 * * * *"  # Executa a cada 5 minutos
  concurrencyPolicy: Allow
  suspend: false
  jobTemplate:
    spec:
      template:
        metadata:
          name: pgbench-workload
        spec:
          runtimeClassName: kata  # Usando Kata Containers para isolamento adicional
          containers:
          - name: pgbench
            image: postgres:14
            command:
            - "/bin/bash"
            - "-c"
            - |
              echo "Aguardando PostgreSQL estar pronto..."
              
              until pg_isready -h postgres -U postgres; do
                echo "PostgreSQL não está pronto ainda. Aguardando..."
                sleep 5
              done
              
              echo "Executando teste de performance CPU-intensivo..."
              pgbench -h postgres -U postgres -c 10 -j 4 -T 120 -P 10 -S benchmark
              
              echo "Executando teste de performance com operações de escrita..."
              pgbench -h postgres -U postgres -c 10 -j 4 -T 60 -P 10 benchmark
              
              echo "Executando teste de performance com transações complexas..."
              pgbench -h postgres -U postgres -c 10 -j 2 -T 60 -P 10 -M prepared -f /tmp/complex.sql benchmark
            resources:
              requests:
                cpu: 300m
                memory: 384Mi
              limits:
                cpu: 600m
                memory: 768Mi
            volumeMounts:
            - name: pgbench-scripts
              mountPath: /tmp
          volumes:
          - name: pgbench-scripts
            configMap:
              name: pgbench-custom-scripts
          restartPolicy: Never
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pgbench-custom-scripts
  namespace: tenant-d
data:
  complex.sql: |
    \set nbranches :scale
    \set ntellers 10 * :scale
    \set naccounts 100000 * :scale
    \set aid random(1, :naccounts)
    \set bid random(1, :nbranches)
    \set tid random(1, :ntellers)
    \set delta random(-5000, 5000)
    BEGIN;
    WITH old_values AS (
      SELECT abalance AS old_abalance
      FROM pgbench_accounts
      WHERE aid = :aid FOR UPDATE
    )
    UPDATE pgbench_accounts
      SET abalance = abalance + :delta
      WHERE aid = :aid;
    SELECT abalance FROM pgbench_accounts WHERE aid = :aid;
    UPDATE pgbench_tellers
      SET tbalance = tbalance + :delta
      WHERE tid = :tid;
    UPDATE pgbench_branches
      SET bbalance = bbalance + :delta
      WHERE bid = :bid;
    INSERT INTO pgbench_history (tid, bid, aid, delta, mtime)
      VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);
    END;
