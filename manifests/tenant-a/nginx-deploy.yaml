apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  namespace: tenant-a
spec:
  replicas: 3  # Aumentando para 3 réplicas para melhor demonstrar o impacto na rede
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.21
        ports:
        - containerPort: 80
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 400m
            memory: 512Mi
        # Configurando o nginx para ser mais sensível às condições de rede
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: tenant-a
data:
  default.conf: |
    server {
        listen 80;
        
        # Configurações para tornar o nginx mais sensível a condições de rede
        client_body_timeout 5s;       # Timeout mais curto para uploads
        client_header_timeout 5s;     # Timeout mais curto para cabeçalhos
        keepalive_timeout 30s;        # Manter conexões ativas
        send_timeout 5s;              # Timeout mais curto para envio de resposta
        
        # Buffer sizes menores para evidenciar problemas de rede
        client_body_buffer_size 8k;
        client_max_body_size 1m;
        client_header_buffer_size 1k;
        
        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
        }
    }
---
apiVersion: v1
kind: Service
metadata:
  name: nginx
  namespace: tenant-a
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
apiVersion: batch/v1
kind: Job
metadata:
  name: nginx-benchmark
  namespace: tenant-a
spec:
  template:
    spec:
      containers:
      - name: wrk
        image: williamyeh/wrk
        command: ["/bin/sh", "-c"]
        args:
        - |
          echo "Iniciando benchmarking do nginx com duração total de ${BASELINE_DURATION} segundos"
          
          # Calcular o tempo final de execução
          END_TIME=$(($(date +%s) + ${BASELINE_DURATION}))
          
          # Loop para executar benchmarks em ciclos até atingir o tempo total
          while [ $(date +%s) -lt $END_TIME ]; do
            # Calcular tempo restante
            REMAINING_TIME=$((END_TIME - $(date +%s)))
            if [ $REMAINING_TIME -le 0 ]; then
              break
            fi
            
            # Definir duração para este ciclo (máximo 60 segundos)
            CYCLE_DURATION=60
            if [ $REMAINING_TIME -lt $CYCLE_DURATION ]; then
              CYCLE_DURATION=$REMAINING_TIME
            fi
            
            echo "Executando benchmark por $CYCLE_DURATION segundos (tempo restante: $REMAINING_TIME segundos)"
            wrk -t4 -c200 -d${CYCLE_DURATION}s --latency http://nginx.tenant-a.svc.cluster.local
            
            # Pequena pausa entre execuções para não sobrecarregar
            if [ $(date +%s) -lt $END_TIME ]; then
              echo "Pausa curta entre ciclos de benchmark..."
              sleep 5
            fi
          done
          
          echo "Benchmarking nginx completo - executado por ${BASELINE_DURATION} segundos."
        env:
        - name: BASELINE_DURATION
          value: "10000"  # Será substituído pelo script principal
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 400m
            memory: 512Mi
      restartPolicy: OnFailure
  backoffLimit: 4
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: iperf-server
  namespace: tenant-a
spec:
  replicas: 1
  selector:
    matchLabels:
      app: iperf-server
  template:
    metadata:
      labels:
        app: iperf-server
    spec:
      containers:
      - name: iperf-server
        image: networkstatic/iperf3
        args:
        - "-s"
        ports:
        - containerPort: 5201
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 400m
            memory: 512Mi
---
apiVersion: v1
kind: Service
metadata:
  name: iperf-server
  namespace: tenant-a
spec:
  selector:
    app: iperf-server
  ports:
  - protocol: TCP
    port: 5201
    targetPort: 5201
