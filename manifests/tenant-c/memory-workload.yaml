apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: tenant-c
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  namespace: tenant-c
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:6.2
        ports:
        - containerPort: 6379
        command: ["redis-server"]
        args:
        - "--maxmemory"
        - "1200mb"  # Aumentando para usar mais memória
        - "--maxmemory-policy"
        - "allkeys-lru"
        - "--save"
        - "60 1000"  # Salvar a cada 60 segundos se houver 1000 chaves alteradas
        resources:
          requests:
            cpu: 300m       # Aumentando request de CPU
            memory: 1Gi     # Aumentando request de memória
          limits:
            cpu: 500m       # Mantendo limite de CPU moderado
            memory: 1.5Gi   # Aumentando limite de memória
---
apiVersion: batch/v1
kind: Job
metadata:
  name: continuous-memory-stress
  namespace: tenant-c
spec:
  template:
    spec:
      containers:
      - name: memory-stress
        image: redis:6.2
        command: ["/bin/sh", "-c"]
        args:
        - |
          # Executar benchmark contínuo com operações mais intensivas de memória
          # Calcular a duração do job baseado na duração da fase
          DURATION_SECONDS=${PHASE_DURATION:-300}  # Valor padrão: 300 segundos (5 minutos)
          echo "Executando workload de memória por aproximadamente $DURATION_SECONDS segundos"
          END_TIME=$(($(date +%s) + DURATION_SECONDS))
          
          while [ $(date +%s) -lt $END_TIME ]; do
            # Usar diferentes tipos de operações com keys e valores grandes
            redis-cli -h redis.tenant-c.svc.cluster.local -p 6379 config set save "" || true
            
            # Configurar para usar mais memória
            redis-cli -h redis.tenant-c.svc.cluster.local -p 6379 config set maxmemory-policy allkeys-lru || true
            
            # Inserir muito mais dados para forçar o uso do limite de memória
            echo "Inserindo dados grandes..."
            redis-benchmark -h redis.tenant-c.svc.cluster.local -p 6379 \
              -c 50 -n 100000 -d 8192 -t set -q || true
            
            # Inserir estruturas de dados complexas que usam mais memória
            echo "Inserindo estruturas de dados complexas..."
            redis-benchmark -h redis.tenant-c.svc.cluster.local -p 6379 \
              -c 30 -n 50000 -d 4096 -t hset,lpush,zadd -q || true
            
            # Criar estruturas de dados aninhadas que usam mais memória
            echo "Criando hashes complexos..."
            for j in $(seq 1 20); do  # Reduzido para 20 para menor overhead
              # Usar valores alfanuméricos seguros em vez de dados binários aleatórios
              random_data=$(head /dev/urandom | tr -dc 'a-zA-Z0-9' | head -c 256)
              
              redis-cli -h redis.tenant-c.svc.cluster.local -p 6379 \
                hset "user:$j" name "user$j" email "user$j@example.com" age "$j" \
                created "$(date)" data "$random_data" || true
              
              # Inserir listas grandes que consomem muita memória
              if [ $((j % 5)) -eq 0 ]; then
                for k in $(seq 1 5); do
                  # Usar valores alfanuméricos seguros em vez de dados binários aleatórios
                  list_data=$(head /dev/urandom | tr -dc 'a-zA-Z0-9' | head -c 128)
                  
                  redis-cli -h redis.tenant-c.svc.cluster.local -p 6379 \
                    lpush "list:$j" "$list_data" || true
                done
              fi
            done
            
            # Verificar se ainda estamos dentro do tempo limite
            if [ $(date +%s) -gt $END_TIME ]; then
              echo "Tempo limite atingido, finalizando..."
              break
            fi
            
            echo "Progresso: $(( 100 - (($END_TIME - $(date +%s)) * 100 / DURATION_SECONDS) ))% concluído"
            sleep 3
          done
          
          echo "Workload de memória concluído após $((($(date +%s) - (END_TIME - DURATION_SECONDS)))) segundos."
        env:
        - name: PHASE_DURATION
          value: "10000"  # Será substituído pelo script principal para durar toda a fase
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 400m
            memory: 512Mi
      restartPolicy: OnFailure
  backoffLimit: 2
---
# Adicionando um monitor de memória para visualizar o impacto no Redis
apiVersion: apps/v1
kind: Deployment
metadata:
  name: memory-monitor
  namespace: tenant-c
spec:
  replicas: 1
  selector:
    matchLabels:
      app: memory-monitor
  template:
    metadata:
      labels:
        app: memory-monitor
    spec:
      containers:
      - name: memory-monitor
        image: redis:6.2
        command: ["/bin/sh", "-c"]
        args:
        - |
          while true; do
            echo "$(date) - Coletando estatísticas de memória do Redis..."
            redis-cli -h redis.tenant-c.svc.cluster.local -p 6379 info memory || echo "Falha ao conectar ao Redis"
            redis-cli -h redis.tenant-c.svc.cluster.local -p 6379 info stats || echo "Falha ao coletar estatísticas"
            sleep 10
          done
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 100m
            memory: 128Mi